---
# tasks file for ansible-mailcow

- name: check, if we have enough memory on the server
  assert:
    that:
        - ansible_memory_mb.real.total >= {{ mc_min_memory }}

# first run 'ansible-initial-server'

- name: Update and upgrade all packages.
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 86400 #One day
  when: ansible_os_family == "Debian"

- name: Ensure Docker is installed.
  include_tasks: docker-debian.yml
  when: ansible_os_family == "Debian"

# pip installation of docker-compose is needed for ansible docker_service to work
# - https://docs.docker.com/compose/install/#alternative-install-options
# - docker-compose installed from github did not work
- name: Ensure docker-compose is installed (via pip).
  pip:
    name: docker-compose
    state: present
    executable: pip3

- name: Ensure git is installed (RancherOS/Alpine).
  apk:
    name: git
    state: present
    update_cache: no
  when: ansible_os_family == "Alpine"

- name: Check, if mailcow is installed already, by checking if mailcow.installed exists.
  stat:
    path: "{{ mc_install_dir }}/mailcow.installed"
  register: mailcow_installed

# this ansible role will do this only for the initial install
# use the *mailcow update* script for updates
- name: Download, configure and install mailcow-dockerized.
  include_tasks: install-mailcow.yml
  when: mailcow_installed.stat.exists == false

- name: Install RainLoop webmail client.
  include_tasks: install-rainloop.yml
  when: mc_rainloop_install

- name: Install NextCloud.
  include_tasks: install-nextcloud.yml
  when: mc_nextcloud_install

- name: Activate mailserver firewall rules.
  include_tasks: mailserver_firewall.yml
  when:
    - mc_firewall_activate
    - ansible_os_family == "Debian"

- name: Create a daily backup cronjob to backup all mailcow data at 4:30 AM.
  cron:
    minute: "30"
    hour: "4"
    name: Backup all mailcow data
    cron_file: mailcow_backups
    user: root
    job: "BACKUP_LOCATION={{ mc_backup_dir }} {{ mc_backup_dir }}/helper-scripts/backup_and_restore.sh backup all >> /var/log/mailcow_backups.log 2>&1"
  when:
    - mc_backup_dir != "none"
    - ansible_os_family == "Debian"

- name: Display post install message.
  debug:
    msg:
      - '*** Things to do now:'
      - '- Visit https://{{ mc_fqdn }} and CHANGE THE DEFAULT PASSWORD `moohoo`!'
      - '- then setup the main domain: {{ mc_domain }} and the main user: {{ mc_email }}'
